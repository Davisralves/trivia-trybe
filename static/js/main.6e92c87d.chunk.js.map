{"version":3,"sources":["7FbY.gif","Redux/Actions/index.js","services/Api.js","services/getGravatar.js","components/Buttons.jsx","components/pages/Login.jsx","components/pages/Helpers/categorys.js","components/pages/Helpers/DropDown.jsx","Redux/Reducers/configReducer.js","components/pages/Settings.jsx","components/pages/Header.jsx","components/Timer.jsx","components/pages/Game.jsx","components/pages/Ranking.jsx","components/pages/Feedback.jsx","App.js","serviceWorker.js","Redux/Reducers/userReducer.js","Redux/Reducers/index.js","Redux/Store/index.js","index.js"],"names":["module","exports","resetScore","payload","type","requestToken","a","async","fetch","data","json","dataJson","localStorage","setItem","token","requestQuestion","questionUrl","requestQuestionAndSave","questionObject","response_code","tokenIsValid","requestTriviaApi","getItem","request","saveScore","score","PlayerScore","player","JSON","stringify","getPlayersRank","parse","getGravatar","email","md5","toString","Buttons","this","props","text","dataTestid","id","disabled","onClick","className","data-testid","Component","defaultProps","Login","name","gravatarEmail","state","console","log","handleChange","bind","handleClick","target","value","setState","path","dispatchSetValue","history","push","src","logo","alt","htmlFor","placeholder","onChange","to","connect","userReducer","dispatch","category","DropDown","title","items","setSettings","setSettingsState","questionType","saveQuestionType","Difficult","toLowerCase","saveDifficult","Category","categoryID","indexOf","saveCategory","map","item","key","INITIAL_STATE","configReducer","Settings","useState","settings","validated","setValidated","loading","setLoading","dispatchDefaultSettings","dispatchSettings","mainPage","categorys","response","handleErroPage","propTypes","PropTypes","func","isRequired","objectOf","any","settingsState","Header","statePlayer","Timer","counter","pause","pauseTimer","subtractTimer","resetTimerFunc","setInterval","resetTimer","dificuldade","timer","calculateDificult","difficulty","correctClick","setCorrectClick","dispatchCount","points","assertions","innitialState","question","correct_answer","sortedAnswers","Game","apiResponse","setApiResponse","questionIndex","setQuestionIndex","disableButton","setdisbleButtons","timerId","setTimerID","setResetTimer","setPauseTimer","useHistory","setTimer30seg","clearTimeout","setTimeout","sortArray","incorrect_answers","sort","Math","random","sortAnswers","results","object","decodeUtf8","string","decodeURI","replace","renderButton","answer","handleAnswerClick","handleNextQuestion","useEffect","fetchApi","parseInt","clicked","index","printAnwsers","nextButton","goToFeedBackButton","none","nextOrGoToFeedbackButton","Ranking","resetReducerScore","playerRank","picture","React","Feedback","goodResult","badResult","questionsAssert","handleRankingClick","newRank","actualRanks","scoreA","savePlayerRank","App","exact","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,6WCW9BC,EAAa,SAACC,GAAD,MAAc,CACtCC,KAFyB,cAEND,Y,yBCVRE,EAAe,4BAAAC,EAAAC,OAAA,sDACF,oDADE,WAAAD,EAAA,MAEPE,MADK,sDADE,cAEpBC,EAFoB,kBAAAH,EAAA,MAGHG,EAAKC,QAHF,cAGpBC,EAHoB,OAI1BC,aAAaC,QAAQ,QAASF,EAASG,OAJb,kBAKnBH,EAASG,OALU,sCAOfC,EAAkB,SAAOD,GAAP,6BAAAR,EAAAC,OAAA,uDAAcS,EAAd,+BAA4B,8CAA5B,WAAAV,EAAA,MACVE,MAAM,GAAD,OAAIQ,GAAJ,OAAkBF,KADb,cACvBL,EADuB,yBAEtBA,EAAKC,QAFiB,sCAKlBO,EAAyB,SAAOH,EAAOE,GAAd,eAAAV,EAAAC,OAAA,kEAAAD,EAAA,MACPS,EAAgBD,EAAOE,IADhB,UAC9BE,EAD8B,OAGf,IADmBA,EAAhCC,cAF4B,yCAI3B,CAAEC,cAAc,EAAMF,mBAJK,gCAK3B,CAAEE,cAAc,IALW,sCAQzBC,EAAmB,SAAOL,GAAP,iBAAAV,EAAAC,OAAA,qDAC1BO,EAAQF,aAAaU,QAAQ,UADH,mCAAAhB,EAAA,MAGNW,EAAuBH,EAAOE,IAHxB,WAGtBO,EAHsB,QAIfH,aAJe,mCAAAd,EAAA,MAKZD,KALY,OAK1BS,EAL0B,OAM1BG,EAAuBH,GANG,iCAQrBS,EAAQL,gBARa,uCAYnBM,EAAY,SAACC,GACxB,IAAMC,EAAc,CAAEC,OAAQF,GACxBE,EAASC,KAAKC,UAAUH,GAC9Bd,aAAaC,QAAQ,QAASc,IAGnBG,EAAiB,kBAAMF,KAAKG,MAAMnB,aAAaU,QAAQ,WAQvDU,EAAc,SAACC,GAE1B,OADiBC,IAAID,GAAOE,YC/Cf,SAASH,EAAYC,GAElC,OADgBC,IAAID,GAAOE,W,ICARC,E,iLACT,IAAD,EAC6CC,KAAKC,MAAjDC,EADD,EACCA,KAAMC,EADP,EACOA,WAAYC,EADnB,EACmBA,GAAIC,EADvB,EACuBA,SAAUC,EADjC,EACiCA,QACxC,OACE,4BACEvC,KAAK,SACLwC,UAAU,gBACVC,cAAcL,EACdC,GAAKA,EACLC,SAAWA,EACXC,QAAUA,GAETJ,O,GAZ4BO,aA0BrCV,EAAQW,aAAe,CACrBJ,QAAS,GACTD,UAAU,G,ICrBNM,E,YACJ,WAAYV,GAAQ,IAAD,sBACjB,4CAAMA,IADW,MAE2BA,EAApCX,OAAUsB,EAFD,EAECA,KAAMC,EAFP,EAEOA,cAFP,OAGjB,EAAKC,MAAQ,CACXxB,OAAQ,CAAEsB,OAAMhB,MAAOiB,IAEzBE,QAAQC,IAAIJ,EAAMC,GAClB,EAAKI,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBARF,E,6EAWwB,IAAD,IAA3BE,OAAUR,EAAiB,EAAjBA,KAAMS,EAAW,EAAXA,MAC7BrB,KAAKsB,UAAS,SAACR,GAAD,MACZ,CAAExB,OAAO,eACJwB,EAAMxB,OADH,eAELsB,EAAOS,U,kCAIIE,G,qFACR3B,EAAUI,KAAKc,MAAflB,M,EAC8BI,KAAKC,MAAnCuB,E,EAAAA,iBAAkBC,E,EAAAA,QAC1BD,EAAiBxB,KAAKc,O,mBAChB9C,K,OACN2B,EAAYC,GACZ6B,EAAQC,KAAKH,G,gFAGL,IAAD,SAC6BvB,KAAKc,MAAjCxB,OAAUsB,EADX,EACWA,KAAMhB,EADjB,EACiBA,MACxB,OACE,6BAASW,UAAU,OACjB,6BAASA,UAAU,eACjB,yBAAKoB,IAAMC,IAAOrB,UAAU,WAAWsB,IAAI,SAC3C,2BAAOC,QAAQ,aAAavB,UAAU,cACpC,2BACExC,KAAK,OACLyC,cAAY,oBACZI,KAAK,OACLV,KAAOU,EACPmB,YAAY,OACZxB,UAAU,SACVH,GAAG,aACHiB,MAAQT,EACRoB,SAAWhC,KAAKiB,gBAGpB,2BAAOa,QAAQ,cAAcvB,UAAU,cACrC,2BACExC,KAAK,QACLwC,UAAU,SACVC,cAAY,uBACZI,KAAK,QACLR,GAAG,cACH2B,YAAY,QACZV,MAAQzB,EACRoC,SAAWhC,KAAKiB,gBAGpB,kBAAC,EAAD,CACEZ,UAAYT,IAAUgB,EACtBT,WAAW,WACXC,GAAG,cACHE,QAAU,kBAAM,EAAKa,YAAY,UACjCjB,KAAK,OACLK,UAAU,aAEZ,kBAAC,IAAD,CAAM0B,GAAG,aACP,kBAAC,EAAD,CACE9B,WAAW,eACXC,GAAG,gBACHF,KAAK,yB,GAxECO,aA8FLyB,eAPS,SAAC,GAAD,MAAsB,CAC5C5C,OADsB,EAAG6C,YACL7C,WAPI,SAAC8C,GAAD,MAAe,CACvCZ,iBAAkB,SAACV,GACjBsB,EJ5FqC,CACvCrE,KAF0B,eAEND,QI2FGgD,QAWVoB,CAA4CvB,G,yBC5E5C0B,EA5BE,CACf,MACA,oBACA,QACA,OACA,QACA,wBACA,aACA,cACA,cACA,qBACA,YACA,cACA,YACA,SACA,YACA,UACA,WACA,MACA,cACA,UACA,WACA,SACA,UACA,2BACA,0B,MCnBa,SAASC,EAASrC,GAAQ,IAC/BsC,EAA8BtC,EAA9BsC,MAAOC,EAAuBvC,EAAvBuC,MAAOC,EAAgBxC,EAAhBwC,YAiChBC,EAAmB,SAACrB,GACV,kBAAVkB,GAhCmB,SAAClB,GACxB,OAAQA,GACR,IAAK,kBACHoB,GAAY,SAAC3B,GAAD,sBAAiBA,EAAjB,CAAwB6B,aAAc,gBAClD,MACF,IAAK,gBACHF,GAAY,SAAC3B,GAAD,sBAAiBA,EAAjB,CAAwB6B,aAAc,eAClD,MACF,QACEF,GAAY,SAAC3B,GAAD,sBAAiBA,EAAjB,CAAwB6B,aAAc,SAuBrBC,CAAiBvB,GAClC,cAAVkB,GApBgB,SAAClB,GAEnBoB,EADY,QAAVpB,EACU,SAACP,GAAD,sBAAiBA,EAAjB,CAAwB+B,UAAW,MAEnC,SAAC/B,GAAD,sBAAiBA,EAAjB,CAAwB+B,UAAWxB,EAAMyB,kBAgB5BC,CAAc1B,GAC3B,aAAVkB,GAbe,SAAClB,GACpB,GAAc,QAAVA,EACFoB,GAAY,SAAC3B,GAAD,sBAAiBA,EAAjB,CAAwBkC,SAAU,YACzC,CACL,IACMC,EAAaZ,EAASa,QAAQ7B,EAAO,GADtB,EAErBoB,GAAY,SAAC3B,GAAD,sBAAiBA,EAAjB,CAAwBkC,SAAUC,QAOtBE,CAAa9B,IAGzC,OACE,2BAAOS,QAAQ,WAAWvB,UAAU,SACjCgC,EADH,IAGG,IACD,4BACE3B,KAAK,WACLL,UAAU,WACVyB,SAAW,gBAAaX,EAAb,EAAGD,OAAUC,MAAb,OAA2BqB,EAAiBrB,KAEtDmB,EAAMY,KAAI,SAACC,EAAMC,GAAP,OAAe,4BAAQA,IAAMA,GAAOD,QCrDhD,IAAME,EAAgB,CAC3BP,SAAU,GACVH,UAAW,GACXF,aAAc,IAuBDa,EApBO,WAA+C,IAA9C1C,EAA6C,uDAArCyC,EAAqC,yCAApBxF,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,QACpD,OAAQC,GACR,IPI4B,iBOJ5B,IACUiF,EAAsClF,EAAtCkF,SAAUH,EAA4B/E,EAA5B+E,UAAWF,EAAiB7E,EAAjB6E,aAC7B,OAAO,eAEA7B,EAFP,CAGIkC,WACAH,YACAF,iBAIN,IPF2B,gBOGzB,OAAOY,EACT,QACE,OAAOzC,ICbX,SAAS2C,EAASxD,GAChB,IADuB,EAGSyD,mBAASH,GAHlB,mBAGhBI,EAHgB,KAGNlB,EAHM,OAIWiB,oBAAS,GAJpB,mBAIhBE,EAJgB,KAILC,EAJK,OAKOH,oBAAS,GALhB,mBAKhBI,EALgB,KAKPC,EALO,KAMfC,EAAuD/D,EAAvD+D,wBAAyBC,EAA8BhE,EAA9BgE,iBAAkBxC,EAAYxB,EAAZwB,QAkB7CyC,EACJ,8BACE,wBAAI1D,cAAY,iBAAiBD,UAAU,mBAA3C,iBACA,yBAAKA,UAAU,cACb,kBAAC+B,EAAD,CAAUC,MAAM,WAAWC,MAAQ2B,EAAY1B,YAAcA,IAC7D,kBAACH,EAAD,CAAUC,MAAM,YAAYC,MA5Bf,CAAC,MAAO,OAAQ,SAAU,QA4BUC,YAAcA,IAC/D,kBAACH,EAAD,CAAUC,MAAM,gBAAgBC,MA5BxB,CAAC,MAAO,kBAAmB,iBA4BaC,YAAcA,KAEhE,yBAAKlC,UAAU,iBACb,4BACExC,KAAK,SACLwC,UAAU,iBACVD,QAAU,kBAAMmB,EAAQC,KAAK,MAC7BrB,SAAWyD,GAJb,QASA,4BACE/F,KAAK,SACLuC,QAAU0D,EACVzD,UAAU,iBACVF,SAAWyD,GAJb,iBAQA,4BACE/F,KAAK,SACLuC,QA5Ca,kCAAArC,EAAAC,OAAA,uDACX8E,GADW,EAC2BW,GAAYJ,GAAlDP,SAAUH,EADC,EACDA,UAAWF,EADV,EACUA,aAC7BoB,GAAW,GAFQ,WAAA9F,EAAA,MAGIe,EAAiB,iDAAD,OAAkDgE,EAAlD,uBAAyEH,EAAzE,iBAA2FF,EAA3F,aAHpB,OAGbyB,EAHa,OAInBL,GAAW,GACNK,GAAYP,GAAa,GAC1BO,IAEmB,IADmBA,EAAhCtF,cAEN+E,GAAa,GAEbI,EAAiBN,IAXF,sCA6CbpD,UAAU,iBACVF,SAAWyD,GAJb,qBAQEA,EAAU,0CAAsB,iCAKlCO,EACJ,8BACE,yBAAK9D,UAAU,iBACb,kFAEE,sCACC,IAHH,4BAOF,yBAAKA,UAAU,iBACb,4BACExC,KAAK,SACLuC,QAAU,WAAQ0D,IAA2BH,GAAa,KAF5D,mBAUN,OACED,EAAYM,EAAWG,EAI3BZ,EAASa,UAAY,CACnBN,wBAAyBO,IAAUC,KAAKC,WACxCR,iBAAkBM,IAAUC,KAAKC,WACjChD,QAAS8C,IAAUG,SAASH,IAAUI,KAAKF,YAG7C,IAOevC,cAAQ,MAPI,SAACE,GAAD,MACzB,CACE6B,iBAAkB,SAACW,GAAD,OAAmBxC,ER7FC,CACxCrE,KAAM,iBAAkBD,QQ4FqC8G,KAC3DZ,wBAAyB,kBAAM5B,ERzFA,CACjCrE,KAF2B,gBAEND,QAAS,aQ4FjBoE,CAAkCuB,GC5G3CoB,G,uLACM,IAAD,EACuC7E,KAAKC,MAA3CX,EADD,EACCA,OAAQM,EADT,EACSA,MAAOR,EADhB,EACgBA,MAAO0F,EADvB,EACuBA,YAE9B,OADA3F,EAAU2F,GAER,4BAAQvE,UAAU,oBAChB,6BACE,yBAAKoB,IAAMC,IAAOrB,UAAU,cAAcsB,IAAI,UAEhD,yBAAKtB,UAAU,gBACb,yBACEC,cAAY,yBACZmB,IAAG,0CAAsChC,EAAYC,IACrDiC,IAAI,WAEN,uBACEtB,UAAU,eACVC,cAAY,sBAEVlB,GAEJ,uBAAGkB,cAAY,eAAeD,UAAU,gBACpCnB,S,GAtBOqB,cA2CNyB,eAPS,SAACpB,GAAD,MAAY,CAClCxB,OAAQwB,EAAMqB,YAAY7C,OAAOsB,KACjChB,MAAOkB,EAAMqB,YAAY7C,OAAOuB,cAChCzB,MAAO0B,EAAMqB,YAAY7C,OAAOF,MAChC0F,YAAahE,EAAMqB,YAAY7C,UAGlB4C,CAAyB2C,GC3ClCE,E,YACJ,WAAY9E,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXkE,QAAS,GACTC,MAAOhF,EAAMiF,YAEf,EAAKC,cAAgB,EAAKA,cAAcjE,KAAnB,gBACrB,EAAKkE,eAAiB,EAAKA,eAAelE,KAApB,gBAPL,E,mJAWL,IACZmE,YAAYrF,KAAKmF,cADL,K,wFAII,IAAD,EACoBnF,KAAKC,MAAhCqF,EADO,EACPA,WAAYJ,EADL,EACKA,WAChBI,GACFtF,KAAKsB,SAAS,CACZ0D,QAAS,GACTC,MAAOC,M,sCAKI,IACPA,EAAelF,KAAKC,MAApBiF,WACRlF,KAAKsB,UAAS,YAAyB,IAAtB0D,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACxB,OAAKA,EAIK,CAAED,UAASC,SAHZD,EAAU,EACZ,CAAEA,QAASA,EAAU,EAAGC,MAAOC,GAC/B,CAAEF,QAAS,Q,wCAKJO,GAIhB,OAAQA,GACR,IAAK,OACH,OALW,EAMb,IAAK,SACH,OANa,EAOf,IAAK,OAEL,QAAS,OARI,K,6BAYRC,EAAOD,GAGZ,OAFa,GAECC,EADGxF,KAAKyF,kBAAkBF,K,+BAIhC,IAAD,EAOMvF,KAAKC,MALhByF,EAFK,EAELA,WACAC,EAHK,EAGLA,aACAC,EAJK,EAILA,gBACAC,EALK,EAKLA,cACAP,EANK,EAMLA,WACAhG,EAPK,EAOLA,OACM0F,EAAYhF,KAAKc,MAAjBkE,QACR,GAAIW,EAAc,CAChB,IAAMvG,EAAQY,KAAK8F,OAAOd,EAASU,GACnCpG,EAAOF,OAASA,EAChBE,EAAOyG,YAAc,EACrB5G,EAAUG,GACVuG,EAAc,CAAEvG,WAChBsG,GAAgB,GAKlB,OAHIN,GACFtF,KAAKoF,iBAGL,qCAEG,IACAJ,O,GAlFWvE,aA+GLyB,eAJS,SAACpB,GAAD,MAAY,CAClCxB,OAAQwB,EAAMqB,YAAY7C,WAPD,SAAC8C,GAAD,MAAe,CACxCyD,cAAe,SAACvG,GACd8C,EVvGkC,CACpCrE,KAFuB,YAEND,QUsGGwB,QAQP4C,CAA6C6C,GC1GtDiB,EAAgB,CACpB,CACE3D,SAAU,oBACVtE,KAAM,GACN2H,WAAY,GACZO,SAAU,gBACVC,eAAgB,GAChBC,cAAe,CAAC,UAAW,aAK/B,SAASC,EAAKnG,GAAQ,IAAD,EACmByD,mBAASsC,GAD5B,mBACZK,EADY,KACCC,EADD,OAEuB5C,mBAAS,GAFhC,mBAEZ6C,EAFY,KAEGC,EAFH,OAGuB9C,oBAAS,GAHhC,mBAGZ+C,EAHY,KAGGC,EAHH,OAIqBhD,oBAAS,GAJ9B,mBAIZiC,EAJY,KAIEC,EAJF,OAKWlC,qBALX,mBAKZiD,EALY,KAKHC,EALG,OAMiBlD,oBAAS,GAN1B,mBAMZ4B,EANY,KAMAuB,EANA,OAOiBnD,oBAAS,GAP1B,mBAOZwB,EAPY,KAOA4B,EAPA,OAQWpD,oBAAS,GARpB,mBAQZI,EARY,KAQHC,EARG,KAWbtC,EAAUsF,cAEVC,EAAgB,WACpBC,aAAaN,GACb,IACMvG,EAAK8G,YACT,kBAAMR,GAAiB,KAFT,KAIhBE,EAAWxG,IAGP+G,EAAY,SAAC,GAEQ,IADzBjB,EACwB,EADxBA,eACAkB,EAAwB,EAAxBA,kBAGA,MADW,CAAIlB,GAAJ,mBAAuBkB,IACrBC,MAAK,kBAAMC,KAAKC,SAFR,OAKjBC,EAAc,SAACC,GAAD,OAClBA,EAAQrE,KAAI,SAACsE,GAAD,sBACLA,EADK,CACGvB,cAAegB,EAAUO,SAYpCC,EAAa,SAACC,GAMlB,OAJkBC,UAAUD,GACUE,QAAQ,UAAW,KACfA,QAAQ,UAAW,KACzBA,QAAQ,WAAY,SAYpDC,EAAe,SAACxH,EAAWyH,EAAQ1E,GAApB,OACnB,4BACEvF,KAAK,SACLwC,UAAYA,EACZ+C,IAAMA,EACNjD,SAAWoG,EACXnG,QAAU,kBAdY,SAACC,GACzBmG,GAAiB,GACjBI,GAAc,GACI,YAAdvG,GACFqF,GAAgB,GAUAqC,CAAkB1H,KAEjCoH,EAAWK,KAWVE,EAAqB,WACrB3B,EAvEqB,IAwEvBC,EAAiBD,EAAgB,GACjCG,GAAiB,IAEnBG,GAAc,GACdG,IACAF,GAAc,IA2BhBqB,qBAAU,YA/EO,2BAAAlK,EAAAC,OAAA,uDACf6F,GAAW,GACHf,EAAsC/C,EAAtC+C,SAAUH,EAA4B5C,EAA5B4C,UAAWF,EAAiB1C,EAAjB0C,aAFd,WAAA1E,EAAA,MAGWe,EAAiB,iDAAD,OAAkDgE,EAAlD,uBAAyEH,EAAzE,iBAA2FF,EAA3F,aAH3B,gBAGP8E,EAHO,EAGPA,QACRnB,EAAekB,EAAYC,IAC3B1D,GAAW,GACXiD,IANe,qCA+ECoB,KAAe,IACjCD,qBAAU,kBAAOtB,GAAc,KAAS,CAACvB,IAnHtB,MA0Hfe,EAAYE,GALdlE,EArHiB,EAqHjBA,SACA4D,EAtHiB,EAsHjBA,SACAC,GAvHiB,EAuHjBA,eACAC,GAxHiB,EAwHjBA,cACAT,GAzHiB,EAyHjBA,WAEF,OACE,0BAAMnF,UAAU,0BACd,kBAAC,EAAD,MACCuD,EAAU,0CAEP,iCACE,kBAAC,EAAD,CACE4B,WAAa2C,SAAS3C,GAAY,IAClC4C,QAAU7B,EACVd,aAAeA,EACfC,gBAAkBA,EAClBN,WAAaA,EACbuB,cAAgBA,EAChB3B,WAAaA,EACb4B,cAAgBA,IAElB,yBAAK1G,GAAG,YACN,wBAAII,cAAY,qBAAqB6B,GACrC,uBAAG7B,cAAY,iBAAiBmH,EAAW1B,KAE7C,6BAvEW,SAACE,EAAeD,GAAhB,OACnBC,EAAc/C,KAAI,SAAC4E,EAAQO,GACzB,OACSR,EADLC,IAAW9B,EACO,UACA,QADW8B,EAAQO,MAqE/BC,CAAarC,GAAeD,KAtDT,WAC/B,IAAMuC,EACJ,4BACE1K,KAAK,SACLuC,QAAU4H,GAFZ,QAMIQ,EACJ,4BACE3K,KAAK,SACLuC,QAAU,kBAAMmB,EAAQC,KAAK,eAF/B,kBAMIiH,EAAO,+BACb,OAAIlC,GAAiBF,EAhGI,EAiGhBkC,EAELhC,GAnGqB,IAmGJF,EACZmC,EACAC,EAmCCC,KAkBdxC,EAAK1F,aAAe,CAClBsC,SAAU,GACVH,UAAW,GACXF,aAAc,IAGDT,mBAjBS,SAAC,GAAD,IAAGsB,EAAH,EAAGA,cAAH,MAAwB,CAC9CR,SAAUQ,EAAcR,SACxBH,UAAWW,EAAcX,UACzBF,aAAca,EAAcb,gBAcfT,CAAyBkE,GC7KlCyC,G,uLACM,IAAD,EACgC7I,KAAKC,MAApCwB,EADD,EACCA,QAASqH,EADV,EACUA,kBACjB,OACE,0BAAMvI,UAAU,0BACd,wBAAIC,cAAY,iBAAhB,aACCf,IACE2D,KAAI,mBApBI,SAACxC,EAAMxB,EAAOQ,GAAd,OACjB,6BACE,4BAAKgB,GACL,yBACEL,UAAU,cACVoB,IAAG,0CAAsChC,EAAYC,IACrDiC,IAAI,WAEN,4BAAKzC,IAYoC2J,CAA9B,EAAGnI,KAAH,EAASxB,MAAT,EAAgB4J,YACvB,4BACEjL,KAAK,SACLyC,cAAY,cACZF,QAAU,WAAQwI,IAAqBrH,EAAQC,KAAK,OAHtD,a,GARcuH,IAAMxI,YAgCbyB,eAAQ,MANI,SAACE,GAAD,MACzB,CACE0G,kBAAmB,kBAAM1G,EAASvE,SAIvBqE,CAAkC2G,GC7C3CK,G,YACJ,aAAe,IAAD,8BACZ,+CACKpI,MAAQ,CACXqI,WAAY,cACZC,UAAW,sBACXC,gBAAiB,GAEnB,EAAKC,mBAAqB,EAAKA,mBAAmBpI,KAAxB,gBAPd,E,gFAUKN,EAAMxB,EAAOQ,EAAO6B,IZwBX,SAAC8H,GAC7B,IAAMC,EAAc/J,KAAoB,GACxClB,aAAaC,QAAQ,QAASe,KAAKC,UAAU,sBAAIgK,GAAJ,CAAiBD,IAC3DlC,MAAK,kBAAUoC,EAAV,EAAGrK,MAAH,SAAsBA,MAA6BqK,OY1BzDC,CAAe,CAAE9I,OAAMxB,QAAOQ,UAC9B6B,EAAQC,KAAK,c,+BAGL,IAAD,SAC4C1B,KAAKc,MAAhDqI,EADD,EACCA,WAAYC,EADb,EACaA,UAAWC,EADxB,EACwBA,gBADxB,EAEgErJ,KAAKC,MAApEW,EAFD,EAECA,KAAMhB,EAFP,EAEOA,MAAOR,EAFd,EAEcA,MAAO2G,EAFrB,EAEqBA,WAAYtE,EAFjC,EAEiCA,QAASqH,EAF1C,EAE0CA,kBACjD,OACE,6BAASvI,UAAU,0BACjB,kBAAC,EAAD,MACA,6BACE,wBAAIC,cAAY,iBACZuF,GAAcsD,EAAkBF,EAAaC,IAGnD,iCACE,wBAAI5I,cAAY,wBACZpB,EADJ,gBAIA,wBAAIoB,cAAY,2BAAhB,kBACeuF,KAGjB,4BACEhI,KAAK,SACLyC,cAAY,iBACZD,UAAU,iBACVD,QAAU,WAAQwI,IAAqBrH,EAAQC,KAAK,OAJtD,QAQA,4BACE3D,KAAK,SACLyC,cAAY,iBACZD,UAAU,iBACVD,QAAU,WAAQwI,IAAqBrH,EAAQC,KAAK,WAJtD,cAQA,4BACE3D,KAAK,SACLyC,cAAY,cACZD,UAAU,iBACVD,QAAU,kBAAM,EAAKgJ,mBAAmB1I,EAAMxB,EAAOQ,EAAO6B,KAJ9D,gB,GApDehB,aAmFRyB,gBAbS,SAACpB,GAAD,MAAY,CAClCF,KAAME,EAAMqB,YAAY7C,OAAOsB,KAC/BhB,MAAOkB,EAAMqB,YAAY7C,OAAOuB,cAChCzB,MAAO0B,EAAMqB,YAAY7C,OAAOF,MAChC2G,WAAYjF,EAAMqB,YAAY7C,OAAOyG,eAGZ,SAAC3D,GAAD,MACzB,CACE0G,kBAAmB,kBAAM1G,EAASvE,SAIvBqE,CAA6CgH,ICjE7CS,G,iLAdX,OACE,iCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACrI,KAAK,IAAIsI,UAAYlJ,IAClC,kBAAC,IAAD,CAAOY,KAAK,YAAYsI,UAAYpG,IACpC,kBAAC,IAAD,CAAOlC,KAAK,QAAQsI,UAAYzD,IAChC,kBAAC,IAAD,CAAO7E,KAAK,YAAYsI,UAAYX,KACpC,kBAAC,IAAD,CAAO3H,KAAK,WAAWsI,UAAYhB,W,GAT3BpI,aCGEqJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+BCfA3G,GAAgB,CACpBjE,OAAQ,CACNsB,KAAM,GACNmF,WAAY,EACZ3G,MAAO,EACPyB,cAAe,KA0CJsB,GAtCK,WAA+C,IAA9CrB,EAA6C,uDAArCyC,GAAqC,yCAApBxF,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,QAClD,OAAQC,GACR,IhBd0B,egBc1B,MACqDD,EAA3CwB,OAAUsB,EADpB,EACoBA,KAAaC,EADjC,EAC0BjB,MACxB,OAAO,eACFkB,EADL,CAEExB,OAAO,eACFwB,EAAMxB,OADL,CAEJsB,OACAC,oBAGN,IhBnBuB,YgBmBvB,IACUvB,EAAWxB,EAAXwB,OACR,OAAO,eACFwB,EADL,CAEExB,OAAQ,CACNsB,KAAMtB,EAAOsB,KACbmF,WAAYzG,EAAOyG,WACnB3G,MAAOE,EAAOF,MACdyB,cAAevB,EAAOuB,iBAG5B,IhBzByB,cgB2BvB,OADAE,QAAQC,IAAIF,GACL,eACFA,EADL,CAEExB,OAAO,eACFwB,EAAMxB,OADL,CAEJyG,WAAY,EACZ3G,MAAO,MAGb,QACE,OAAO0B,ICxCIqJ,GAFKC,2BAAgB,CAAEjI,eAAaqB,kBCC7C6G,GAAQC,uBAAYH,GAAaI,+BAAoBC,2BAAgBC,QAEvEV,OAAOW,UACTX,OAAOM,MAAQA,IAGFA,UCFfM,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUP,MAAQA,IAChB,kBAAC,GAAD,QAGJQ,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6e92c87d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/7FbY.f7d7b7e7.gif\";","export const SET_FEEDBACK = 'SET_FEEDBACK';\nexport const setfeedback = (payload) => ({\n  type: SET_FEEDBACK, payload,\n});\n\nexport const SET_SCORE = 'SET_SCORE';\nexport const setScore = (payload) => ({\n  type: SET_SCORE, payload,\n});\n\nexport const RESET_SCORE = 'RESET_SCORE';\nexport const resetScore = (payload) => ({\n  type: RESET_SCORE, payload,\n});\n\nexport const SET_NEW_CONFIG = 'SET_NEW_CONFIG';\nexport const setNewConfig = (payload) => ({\n  type: 'SET_NEW_CONFIG', payload,\n});\n\nexport const RESET_DEFAULT = 'RESET_DEFAULT';\nexport const resetDefault = () => ({\n  type: RESET_DEFAULT, payload: 'null',\n});\n","import md5 from 'crypto-js/md5';\n\nexport const requestToken = async () => {\n  const sessionTokenUrl = 'https://opentdb.com/api_token.php?command=request';\n  const data = await fetch(sessionTokenUrl);\n  const dataJson = await data.json();\n  localStorage.setItem('token', dataJson.token);\n  return dataJson.token;\n};\nexport const requestQuestion = async (token, questionUrl = 'https://opentdb.com/api.php?amount=5&token=') => {\n  const data = await fetch(`${questionUrl}${token}`);\n  return data.json();\n};\n\nexport const requestQuestionAndSave = async (token, questionUrl) => {\n  const questionObject = await requestQuestion(token, questionUrl);\n  const { response_code: responseCode } = questionObject;\n  if (responseCode === 0) {\n    return { tokenIsValid: true, questionObject };\n  } return { tokenIsValid: false };\n};\n\nexport const requestTriviaApi = async (questionUrl) => { // questionUrl opcional\n  let token = localStorage.getItem('token');\n  if (token) {\n    const request = await requestQuestionAndSave(token, questionUrl);\n    if (!request.tokenIsValid) {\n      token = await requestToken();\n      requestQuestionAndSave(token);\n    }\n    return request.questionObject;\n  }\n};\n\nexport const saveScore = (score) => {\n  const PlayerScore = { player: score };\n  const player = JSON.stringify(PlayerScore);\n  localStorage.setItem('state', player);\n};\n\nexport const getPlayersRank = () => JSON.parse(localStorage.getItem('ranks'));\n\nexport const savePlayerRank = (newRank) => {\n  const actualRanks = getPlayersRank() || [];\n  localStorage.setItem('ranks', JSON.stringify([...actualRanks, newRank]\n    .sort(({ score: scoreA }, { score: scoreB }) => scoreB - scoreA)));\n};\n\nexport const getGravatar = (email) => {\n  const gravatar = md5(email).toString();\n  return gravatar;\n};\n","import md5 from 'crypto-js/md5';\n\nexport default function getGravatar(email) {\n  const getHash = md5(email).toString();\n  return getHash;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Buttons extends Component {\n  render() {\n    const { text, dataTestid, id, disabled, onClick } = this.props;\n    return (\n      <button\n        type=\"button\"\n        className=\"buttons-login\"\n        data-testid={ dataTestid }\n        id={ id }\n        disabled={ disabled }\n        onClick={ onClick }\n      >\n        {text}\n      </button>\n    );\n  }\n}\n\nButtons.propTypes = {\n  text: PropTypes.string.isRequired,\n  dataTestid: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nButtons.defaultProps = {\n  onClick: '',\n  disabled: false,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport logo from '../../7FbY.gif';\nimport { setfeedback } from '../../Redux/Actions';\nimport { requestToken } from '../../services/Api';\nimport getGravatar from '../../services/getGravatar';\nimport Buttons from '../Buttons';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    const { player: { name, gravatarEmail } } = props;\n    this.state = {\n      player: { name, email: gravatarEmail },\n    };\n    console.log(name, gravatarEmail);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState((state) => (\n      { player: {\n        ...state.player,\n        [name]: value,\n      } }));\n  }\n\n  async handleClick(path) {\n    const { email } = this.state;\n    const { dispatchSetValue, history } = this.props;\n    dispatchSetValue(this.state);\n    await requestToken();\n    getGravatar(email);\n    history.push(path);\n  }\n\n  render() {\n    const { player: { name, email } } = this.state;\n    return (\n      <section className=\"App\">\n        <section className=\"input-login\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          <label htmlFor=\"name-input\" className=\"name-input\">\n            <input\n              type=\"text\"\n              data-testid=\"input-player-name\"\n              name=\"name\"\n              text={ name }\n              placeholder=\"Name\"\n              className=\"inputs\"\n              id=\"name-input\"\n              value={ name }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"email-input\" className=\"name-input\">\n            <input\n              type=\"email\"\n              className=\"inputs\"\n              data-testid=\"input-gravatar-email\"\n              name=\"email\"\n              id=\"email-input\"\n              placeholder=\"Email\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <Buttons\n            disabled={ !email || !name }\n            dataTestid=\"btn-play\"\n            id=\"button-form\"\n            onClick={ () => this.handleClick('/game') }\n            text=\"Play\"\n            className=\"gameNext\"\n          />\n          <Link to=\"/settings\">\n            <Buttons\n              dataTestid=\"btn-settings\"\n              id=\"button-config\"\n              text=\"Configuration\"\n            />\n          </Link>\n        </section>\n      </section>\n    );\n  }\n}\n\nconst mapDipatchToProps = (dispatch) => ({\n  dispatchSetValue: (state) => {\n    dispatch(setfeedback(state));\n  },\n});\n\nconst mapStateToProps = ({ userReducer }) => ({\n  player: userReducer.player,\n});\nLogin.propTypes = {\n  dispatchSetValue: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDipatchToProps)(Login);\n","const category = [\n  'Any',\n  'General Knowledge',\n  'Books',\n  'Film',\n  'Music',\n  'Musicals and Theatres',\n  'Television',\n  'Video Games',\n  'Board Games',\n  'Science and Nature',\n  'Computers',\n  'Mathematics',\n  'Mythology',\n  'Sports',\n  'Geography',\n  'History',\n  'Politics',\n  'Art',\n  'Celebreties',\n  'Animals',\n  'Vehicles',\n  'Comics',\n  'Gadgets',\n  'Japanise Anime and Manga',\n  'Cartoon and Animations',\n];\n// categoryids = [9, 10, 11, 12];\nexport default category;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport '../css/Settings.css';\nimport category from './categorys';\n\n// eslint-disable-next-line max-lines-per-function\nexport default function DropDown(props) {\n  const { title, items, setSettings } = props;\n\n  const saveQuestionType = (value) => {\n    switch (value) {\n    case 'Multiple Choice':\n      setSettings((state) => ({ ...state, questionType: 'multiple' }));\n      break;\n    case 'True or False':\n      setSettings((state) => ({ ...state, questionType: 'boolean' }));\n      break;\n    default:\n      setSettings((state) => ({ ...state, questionType: '' }));\n    }\n  };\n\n  const saveDifficult = (value) => {\n    if (value === 'Any') {\n      setSettings((state) => ({ ...state, Difficult: '' }));\n    } else {\n      setSettings((state) => ({ ...state, Difficult: value.toLowerCase() }));\n    }\n  };\n\n  const saveCategory = (value) => {\n    if (value === 'Any') {\n      setSettings((state) => ({ ...state, Category: '' }));\n    } else {\n      const categoryBase = 8;\n      const categoryID = category.indexOf(value, 1) + categoryBase;\n      setSettings((state) => ({ ...state, Category: categoryID }));\n    }\n  };\n\n  const setSettingsState = (value) => {\n    if (title === 'Question Type') saveQuestionType(value);\n    if (title === 'Difficult') saveDifficult(value);\n    if (title === 'Category') saveCategory(value);\n  };\n\n  return (\n    <label htmlFor=\"dropdown\" className=\"label\">\n      {title}\n      :\n      {' '}\n      <select\n        name=\"dropdown\"\n        className=\"dropdown\"\n        onChange={ ({ target: { value } }) => setSettingsState(value) }\n      >\n        {items.map((item, key) => <option key={ key }>{item}</option>)}\n      </select>\n    </label>\n  );\n}\n\nDropDown.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setSettings: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","/* eslint-disable no-case-declarations */\nimport { RESET_DEFAULT, SET_NEW_CONFIG } from '../Actions/index';\n\nexport const INITIAL_STATE = {\n  Category: '',\n  Difficult: '',\n  questionType: '',\n};\n\nconst configReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case SET_NEW_CONFIG:\n    const { Category, Difficult, questionType } = payload;\n    return (\n      {\n        ...state,\n        Category,\n        Difficult,\n        questionType,\n      }\n    );\n\n  case RESET_DEFAULT:\n    return INITIAL_STATE;\n  default:\n    return state;\n  }\n};\n\nexport default configReducer;\n","/* eslint-disable camelcase */\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport categorys from './Helpers/categorys';\nimport DropDown from './Helpers/DropDown';\nimport { INITIAL_STATE } from '../../Redux/Reducers/configReducer';\nimport { setNewConfig, resetDefault } from '../../Redux/Actions/index';\nimport { requestTriviaApi } from '../../services/Api';\nimport './css/Settings.css';\n\n// eslint-disable-next-line max-lines-per-function\nfunction Settings(props) {\n  const difficults = ['Any', 'Easy', 'Medium', 'Hard'];\n  const types = ['Any', 'Multiple Choice', 'True or False'];\n  const [settings, setSettings] = useState(INITIAL_STATE);\n  const [validated, setValidated] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const { dispatchDefaultSettings, dispatchSettings, history } = props;\n\n  const saveSettings = async () => {\n    const { Category, Difficult, questionType } = settings || INITIAL_STATE;\n    setLoading(true);\n    const response = await requestTriviaApi(`https://opentdb.com/api.php?amount=5&category=${Category}&difficulty=${Difficult}&type=${questionType}&token=`);\n    setLoading(false);\n    if (!response) { setValidated(false); }\n    if (response) {\n      const { response_code: responseCode } = response;\n      if (responseCode !== 0) {\n        setValidated(false);\n      } else {\n        dispatchSettings(settings);\n      }\n    }\n  };\n\n  const mainPage = (\n    <main>\n      <h1 data-testid=\"settings-title\" className=\"textAlingCenter\">Configuration</h1>\n      <div className=\"flexboxRow\">\n        <DropDown title=\"Category\" items={ categorys } setSettings={ setSettings } />\n        <DropDown title=\"Difficult\" items={ difficults } setSettings={ setSettings } />\n        <DropDown title=\"Question Type\" items={ types } setSettings={ setSettings } />\n      </div>\n      <div className=\"flexboxCenter\">\n        <button\n          type=\"button\"\n          className=\"settingsButton\"\n          onClick={ () => history.push('/') }\n          disabled={ loading }\n        >\n          Home\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={ dispatchDefaultSettings }\n          className=\"settingsButton\"\n          disabled={ loading }\n        >\n          Reset Default\n        </button>\n        <button\n          type=\"button\"\n          onClick={ saveSettings }\n          className=\"settingsButton\"\n          disabled={ loading }\n        >\n          Save new Settings\n        </button>\n        { loading ? <h3>Loading...</h3> : <span />}\n      </div>\n    </main>\n  );\n\n  const handleErroPage = (\n    <main>\n      <div className=\"flexboxCenter\">\n        <h3>\n          We don´t have questions for this specific set of\n          <em> Rules</em>\n          {' '}\n          Please try another set.\n        </h3>\n      </div>\n      <div className=\"flexboxCenter\">\n        <button\n          type=\"button\"\n          onClick={ () => { dispatchDefaultSettings(); setValidated(true); } }\n        >\n          Reset Default\n        </button>\n      </div>\n\n    </main>);\n\n  return (\n    validated ? mainPage : handleErroPage\n  );\n}\n\nSettings.propTypes = {\n  dispatchDefaultSettings: PropTypes.func.isRequired,\n  dispatchSettings: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => (\n  {\n    dispatchSettings: (settingsState) => dispatch(setNewConfig(settingsState)),\n    dispatchDefaultSettings: () => dispatch(resetDefault()),\n  }\n);\n\nexport default connect(null, mapDispatchToProps)(Settings);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport logo from '../../7FbY.gif';\nimport { saveScore, getGravatar } from '../../services/Api';\n\nclass Header extends Component {\n  render() {\n    const { player, email, score, statePlayer } = this.props;\n    saveScore(statePlayer);\n    return (\n      <header className=\"header-questions\">\n        <div>\n          <img src={ logo } className=\"logo-header\" alt=\"logo\" />\n        </div>\n        <div className=\"gravatal-img\">\n          <img\n            data-testid=\"header-profile-picture\"\n            src={ `https://www.gravatar.com/avatar/${getGravatar(email)}` }\n            alt=\"player\"\n          />\n          <p\n            className=\"Headermargin\"\n            data-testid=\"header-player-name\"\n          >\n            { player }\n          </p>\n          <p data-testid=\"header-score\" className=\"Headermargin\">\n            { score }\n          </p>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  player: PropTypes.string,\n  email: PropTypes.string,\n  score: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.userReducer.player.name,\n  email: state.userReducer.player.gravatarEmail,\n  score: state.userReducer.player.score,\n  statePlayer: state.userReducer.player,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setScore } from '../Redux/Actions';\nimport { saveScore } from '../services/Api';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 30,\n      pause: props.pauseTimer,\n    };\n    this.subtractTimer = this.subtractTimer.bind(this);\n    this.resetTimerFunc = this.resetTimerFunc.bind(this);\n  }\n\n  async componentDidMount() {\n    const seg = 1000;\n    setInterval(this.subtractTimer, seg);\n  }\n\n  resetTimerFunc() {\n    const { resetTimer, pauseTimer } = this.props;\n    if (resetTimer) {\n      this.setState({\n        counter: 30,\n        pause: pauseTimer,\n      });\n    }\n  }\n\n  subtractTimer() {\n    const { pauseTimer } = this.props;\n    this.setState(({ counter, pause }) => {\n      if (!pause) {\n        return counter > 0\n          ? ({ counter: counter - 1, pause: pauseTimer })\n          : ({ counter: 0 });\n      } return ({ counter, pause });\n    });\n  }\n\n  calculateDificult(dificuldade) {\n    const hard = 3;\n    const medium = 2;\n    const easy = 1;\n    switch (dificuldade) {\n    case 'hard':\n      return hard;\n    case 'medium':\n      return medium;\n    case 'easy':\n      return easy;\n    default: return easy;\n    }\n  }\n\n  points(timer, dificuldade) {\n    const base = 10;\n    const dificult = this.calculateDificult(dificuldade);\n    return base + timer * dificult;\n  }\n\n  render() {\n    const {\n      difficulty,\n      correctClick,\n      setCorrectClick,\n      dispatchCount,\n      resetTimer,\n      player } = this.props;\n    const { counter } = this.state;\n    if (correctClick) {\n      const score = this.points(counter, difficulty);\n      player.score += score;\n      player.assertions += 1;\n      saveScore(player);\n      dispatchCount({ player });\n      setCorrectClick(false);\n    }\n    if (resetTimer) {\n      this.resetTimerFunc();\n    }\n    return (\n      <h3>\n        Tempo:\n        {' '}\n        {counter}\n      </h3>\n    );\n  }\n}\n\nTimer.propTypes = {\n  correctClick: PropTypes.bool.isRequired,\n  resetTimer: PropTypes.bool.isRequired,\n  difficulty: PropTypes.number.isRequired,\n  dispatchCount: PropTypes.func.isRequired,\n  player: PropTypes.shape({\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n  }).isRequired,\n  setCorrectClick: PropTypes.func.isRequired,\n  pauseTimer: PropTypes.bool.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchCount: (player) => {\n    dispatch(setScore(player));\n  },\n});\n\nconst mapStateToProps = (state) => ({\n  player: state.userReducer.player,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","/* eslint-disable max-statements */\n/* eslint-disable camelcase */\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { requestTriviaApi } from '../../services/Api';\nimport './css/Game.css';\nimport Header from './Header';\nimport Timer from '../Timer';\n\nconst innitialState = [\n  {\n    category: 'question-category',\n    type: '',\n    difficulty: '',\n    question: 'question-text',\n    correct_answer: '',\n    sortedAnswers: ['answer1', 'answer2'],\n  },\n];\n\n// eslint-disable-next-line max-lines-per-function\nfunction Game(props) {\n  const [apiResponse, setApiResponse] = useState(innitialState);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [disableButton, setdisbleButtons] = useState(false);\n  const [correctClick, setCorrectClick] = useState(false);\n  const [timerId, setTimerID] = useState();\n  const [resetTimer, setResetTimer] = useState(false);\n  const [pauseTimer, setPauseTimer] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const maxQuestionsNumber = 4;\n  const history = useHistory();\n\n  const setTimer30seg = () => {\n    clearTimeout(timerId);\n    const timeOut = 30000;\n    const id = setTimeout(\n      () => setdisbleButtons(true), timeOut,\n    );\n    setTimerID(id);\n  };\n\n  const sortArray = ({\n    correct_answer,\n    incorrect_answers }) => {\n    const fiftyPercent = 0.5;\n    const array = [correct_answer, ...incorrect_answers];\n    return array.sort(() => Math.random() - fiftyPercent);\n  };\n\n  const sortAnswers = (results) => (\n    results.map((object) => (\n      { ...object, sortedAnswers: sortArray(object) }))\n  );\n\n  const fetchApi = async () => {\n    setLoading(true);\n    const { Category, Difficult, questionType } = props;\n    const { results } = await requestTriviaApi(`https://opentdb.com/api.php?amount=5&category=${Category}&difficulty=${Difficult}&type=${questionType}&token=`);\n    setApiResponse(sortAnswers(results));\n    setLoading(false);\n    setTimer30seg();\n  };\n\n  const decodeUtf8 = (string) => {\n    // função inspirada em por função de Lucas Rodrigues Turma 08\n    const stringUTF = decodeURI(string);\n    const convertDoubleQuotes = stringUTF.replace(/&quot;/g, '\"');\n    const convertQuotes = convertDoubleQuotes.replace(/&#039;/g, '\\'');\n    const convertAccent = convertQuotes.replace(/&eacute/g, 'é');\n    return convertAccent;\n  };\n\n  const handleAnswerClick = (className) => {\n    setdisbleButtons(true);\n    setPauseTimer(true);\n    if (className === 'correct') {\n      setCorrectClick(true);\n    }\n  };\n\n  const renderButton = (className, answer, key) => (\n    <button\n      type=\"button\"\n      className={ className }\n      key={ key }\n      disabled={ disableButton }\n      onClick={ () => handleAnswerClick(className) }\n    >\n      {decodeUtf8(answer)}\n    </button>);\n\n  const printAnwsers = (sortedAnswers, correct_answer) => (\n    sortedAnswers.map((answer, index) => {\n      if (answer === correct_answer) {\n        return renderButton('correct', answer, index);\n      } return renderButton('wrong', answer, index);\n    })\n  );\n\n  const handleNextQuestion = () => {\n    if (questionIndex < maxQuestionsNumber) {\n      setQuestionIndex(questionIndex + 1);\n      setdisbleButtons(false);\n    }\n    setResetTimer(true);\n    setTimer30seg();\n    setPauseTimer(false);\n  };\n\n  const nextOrGoToFeedbackButton = () => {\n    const nextButton = (\n      <button\n        type=\"button\"\n        onClick={ handleNextQuestion }\n      >\n        Next\n      </button>);\n    const goToFeedBackButton = (\n      <button\n        type=\"button\"\n        onClick={ () => history.push('/feedback') }\n      >\n        Go to Feedback\n      </button>);\n    const none = <span />;\n    if (disableButton && questionIndex < maxQuestionsNumber) {\n      return nextButton;\n    }\n    if (disableButton && questionIndex === maxQuestionsNumber) {\n      return goToFeedBackButton;\n    } return none;\n  };\n\n  useEffect(() => { fetchApi(); }, []);\n  useEffect(() => (setResetTimer(false)), [resetTimer]);\n  const {\n    category,\n    question,\n    correct_answer,\n    sortedAnswers,\n    difficulty,\n  } = apiResponse[questionIndex];\n  return (\n    <main className=\"App paper container-lg\">\n      <Header />\n      {loading ? <h1>Loading...</h1>\n        : (\n          <section>\n            <Timer\n              difficulty={ parseInt(difficulty, 10) }\n              clicked={ disableButton }\n              correctClick={ correctClick }\n              setCorrectClick={ setCorrectClick }\n              resetTimer={ resetTimer }\n              setResetTimer={ setResetTimer }\n              pauseTimer={ pauseTimer }\n              setPauseTimer={ setPauseTimer }\n            />\n            <div id=\"buttonId\">\n              <h6 data-testid=\"question-category\">{category}</h6>\n              <p data-testid=\"question-text\">{decodeUtf8(question)}</p>\n            </div>\n            <div>\n              { printAnwsers(sortedAnswers, correct_answer) }\n            </div>\n            { nextOrGoToFeedbackButton() }\n          </section>\n        )}\n    </main>\n  );\n}\n\nconst mapStateToProps = ({ configReducer }) => ({\n  Category: configReducer.Category,\n  Difficult: configReducer.Difficult,\n  questionType: configReducer.questionType,\n});\n\nGame.propTypes = {\n  Category: PropTypes.number,\n  Difficult: PropTypes.string,\n  questionType: PropTypes.string,\n};\nGame.defaultProps = {\n  Category: '',\n  Difficult: '',\n  questionType: '',\n};\n\nexport default connect(mapStateToProps)(Game);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { resetScore } from '../../Redux/Actions';\nimport { getPlayersRank, getGravatar } from '../../services/Api';\nimport './css/Ranking.css';\n\nconst playerRank = (name, score, email) => (\n  <div>\n    <h5>{name}</h5>\n    <img\n      className=\"gravatarImg\"\n      src={ `https://www.gravatar.com/avatar/${getGravatar(email)}` }\n      alt=\"player\"\n    />\n    <h5>{score}</h5>\n  </div>\n\n);\n\nclass Ranking extends React.Component {\n  render() {\n    const { history, resetReducerScore } = this.props;\n    return (\n      <main className=\"App paper container-lg\">\n        <h1 data-testid=\"ranking-title\"> Ranking </h1>\n        {getPlayersRank()\n          .map(({ name, score, picture }) => playerRank(name, score, picture))}\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => { resetReducerScore(); history.push('/'); } }\n        >\n          Home\n        </button>\n      </main>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => (\n  {\n    resetReducerScore: () => dispatch(resetScore()),\n  }\n);\n\nexport default connect(null, mapDispatchToProps)(Ranking);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { resetScore } from '../../Redux/Actions/index';\nimport Header from './Header';\nimport { savePlayerRank } from '../../services/Api';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.state = {\n      goodResult: 'Mandou bem!',\n      badResult: 'Podia ser melhor...',\n      questionsAssert: 3,\n    };\n    this.handleRankingClick = this.handleRankingClick.bind(this);\n  }\n\n  handleRankingClick(name, score, email, history) {\n    savePlayerRank({ name, score, email });\n    history.push('/ranking');\n  }\n\n  render() {\n    const { goodResult, badResult, questionsAssert } = this.state;\n    const { name, email, score, assertions, history, resetReducerScore } = this.props;\n    return (\n      <section className=\"App paper container-lg\">\n        <Header />\n        <div>\n          <h3 data-testid=\"feedback-text\">\n            { assertions >= questionsAssert ? goodResult : badResult }\n          </h3>\n        </div>\n        <section>\n          <h1 data-testid=\"feedback-total-score\">\n            { score }\n            🏆\n          </h1>\n          <h2 data-testid=\"feedback-total-question\">\n            { `acertou ${assertions}` }\n          </h2>\n        </section>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n          className=\"settingsButton\"\n          onClick={ () => { resetReducerScore(); history.push('/'); } }\n        >\n          Home\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n          className=\"settingsButton\"\n          onClick={ () => { resetReducerScore(); history.push('/game'); } }\n        >\n          Play Again\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n          className=\"settingsButton\"\n          onClick={ () => this.handleRankingClick(name, score, email, history) }\n        >\n          Ranking\n        </button>\n      </section>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  score: PropTypes.number,\n  assertions: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  name: state.userReducer.player.name,\n  email: state.userReducer.player.gravatarEmail,\n  score: state.userReducer.player.score,\n  assertions: state.userReducer.player.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => (\n  {\n    resetReducerScore: () => dispatch(resetScore()),\n  }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router';\nimport './App.css';\nimport Login from './components/pages/Login';\nimport Settings from './components/pages/Settings';\nimport Game from './components/pages/Game';\nimport Ranking from './components/pages/Ranking';\nimport Feedback from './components/pages/Feedback';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route path=\"/settings\" component={ Settings } />\n          <Route path=\"/game\" component={ Game } />\n          <Route path=\"/feedback\" component={ Feedback } />\n          <Route path=\"/ranking\" component={ Ranking } />\n        </Switch>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-case-declarations */\nimport { SET_FEEDBACK, SET_SCORE, RESET_SCORE } from '../Actions/index';\n\nconst INITIAL_STATE = {\n  player: {\n    name: '',\n    assertions: 0,\n    score: 0,\n    gravatarEmail: '',\n  },\n};\n\nconst userReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case SET_FEEDBACK:\n    const { player: { name, email: gravatarEmail } } = payload;\n    return {\n      ...state,\n      player: {\n        ...state.player,\n        name,\n        gravatarEmail,\n      },\n    };\n  case SET_SCORE:\n    const { player } = payload;\n    return {\n      ...state,\n      player: {\n        name: player.name,\n        assertions: player.assertions,\n        score: player.score,\n        gravatarEmail: player.gravatarEmail,\n      },\n    };\n  case RESET_SCORE:\n    console.log(state);\n    return {\n      ...state,\n      player: {\n        ...state.player,\n        assertions: 0,\n        score: 0,\n      },\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\nimport configReducer from './configReducer';\n\nconst rootReducer = combineReducers({ userReducer, configReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../Reducers/index';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './Redux/Store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}