{"version":3,"sources":["7FbY.gif","services/Api.js","services/getGravatar.js","components/Buttons.jsx","components/pages/Login.jsx","Redux/Actions/index.js","components/pages/Settings.jsx","components/pages/Header.jsx","components/Timer.jsx","components/pages/Game.jsx","components/pages/Feedback.jsx","components/pages/Ranking.jsx","App.js","serviceWorker.js","Redux/Reducers/userReducer.js","Redux/Reducers/index.js","Redux/Store/index.js","index.js"],"names":["module","exports","requestToken","a","async","fetch","data","json","dataJson","localStorage","setItem","token","requestQuestion","questionUrl","requestQuestionAndSave","questionObject","response_code","tokenIsValid","requestTriviaApi","getItem","request","saveScore","score","PlayerScore","player","JSON","stringify","getPlayersRank","parse","getGravatar","email","md5","toString","Buttons","this","props","text","dataTestid","id","disabled","onClick","type","className","data-testid","Component","defaultProps","Login","state","name","handleChange","bind","handleClick","target","value","setState","path","dispatchSetValue","history","push","src","logo","alt","htmlFor","placeholder","onChange","to","connect","dispatch","payload","Settings","Header","statePlayer","userReducer","gravatarEmail","Timer","counter","pause","pauseTimer","subtractTimer","resetTimerFunc","setInterval","resetTimer","dificuldade","timer","calculateDificult","difficulty","correctClick","setCorrectClick","dispatchCount","points","assertions","innitialState","category","question","correct_answer","sortedAnswers","Game","useState","apiResponse","setApiResponse","questionIndex","setQuestionIndex","disableButton","setdisbleButtons","timerId","setTimerID","setResetTimer","setPauseTimer","loading","setLoading","useHistory","setTimer30seg","clearTimeout","setTimeout","sortArray","incorrect_answers","sort","Math","random","sortAnswers","results","map","object","decodeUtf8","string","decodeURI","replace","renderButton","answer","key","handleAnswerClick","handleNextQuestion","useEffect","fetchApi","parseInt","clicked","index","printAnwsers","nextButton","goToFeedBackButton","none","nextOrGoToFeedbackButton","Feedback","goodResult","badResult","questionsAssert","handleRankingClick","newRank","actualRanks","scoreA","savePlayerRank","Ranking","playerRank","picture","React","App","exact","component","Boolean","window","location","hostname","match","INITIAL_STATE","colors","wrongColor","rigthColor","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8048e98b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/7FbY.f7d7b7e7.gif\";","import md5 from 'crypto-js/md5';\n\nexport const requestToken = async () => {\n  const sessionTokenUrl = 'https://opentdb.com/api_token.php?command=request';\n  const data = await fetch(sessionTokenUrl);\n  const dataJson = await data.json();\n  localStorage.setItem('token', dataJson.token);\n  return dataJson.token;\n};\nexport const requestQuestion = async (token, questionUrl = 'https://opentdb.com/api.php?amount=5&token=') => {\n  const data = await fetch(`${questionUrl}${token}`);\n  return data.json();\n};\n\nexport const requestQuestionAndSave = async (token, questionUrl) => {\n  const questionObject = await requestQuestion(token, questionUrl);\n  const { response_code: responseCode } = questionObject;\n  if (responseCode === 0) {\n    return { tokenIsValid: true, questionObject };\n  } return { tokenIsValid: false };\n};\n\nexport const requestTriviaApi = async (questionUrl) => { // questionUrl opcional\n  let token = localStorage.getItem('token');\n  if (token) {\n    const request = await requestQuestionAndSave(token, questionUrl);\n    if (!request.tokenIsValid) {\n      token = await requestToken();\n      requestQuestionAndSave(token);\n    }\n    return request.questionObject;\n  }\n};\n\nexport const saveScore = (score) => {\n  const PlayerScore = { player: score };\n  const player = JSON.stringify(PlayerScore);\n  localStorage.setItem('state', player);\n};\n\nexport const getPlayersRank = () => JSON.parse(localStorage.getItem('ranks'));\n\nexport const savePlayerRank = (newRank) => {\n  const actualRanks = getPlayersRank() || [];\n  localStorage.setItem('ranks', JSON.stringify([...actualRanks, newRank]\n    .sort(({ score: scoreA }, { score: scoreB }) => scoreB - scoreA)));\n};\n\nexport const getGravatar = (email) => {\n  const gravatar = md5(email).toString();\n  return gravatar;\n};\n","import md5 from 'crypto-js/md5';\n\nexport default function getGravatar(email) {\n  const getHash = md5(email).toString();\n  return getHash;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Buttons extends Component {\n  render() {\n    const { text, dataTestid, id, disabled, onClick } = this.props;\n    return (\n      <button\n        type=\"button\"\n        className=\"buttons-login\"\n        data-testid={ dataTestid }\n        id={ id }\n        disabled={ disabled }\n        onClick={ onClick }\n      >\n        {text}\n      </button>\n    );\n  }\n}\n\nButtons.propTypes = {\n  text: PropTypes.string.isRequired,\n  dataTestid: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nButtons.defaultProps = {\n  onClick: '',\n  disabled: false,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport logo from '../../7FbY.gif';\nimport { setfeedback } from '../../Redux/Actions';\nimport { requestToken } from '../../services/Api';\nimport getGravatar from '../../services/getGravatar';\nimport Buttons from '../Buttons';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      player: { name: '', email: '' },\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleClick(path) {\n    const { email } = this.state;\n    const { dispatchSetValue, history } = this.props;\n    dispatchSetValue(this.state);\n    await requestToken();\n    getGravatar(email);\n    history.push(path);\n  }\n\n  render() {\n    const { name, email } = this.state;\n    return (\n      <section className=\"App\">\n        <section className=\"input-login\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          <label htmlFor=\"name-input\" className=\"name-input\">\n            <input\n              type=\"text\"\n              data-testid=\"input-player-name\"\n              name=\"name\"\n              placeholder=\"Nome\"\n              className=\"inputs\"\n              id=\"name-input\"\n              value={ name }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"email-input\" className=\"name-input\">\n            <input\n              type=\"email\"\n              className=\"inputs\"\n              data-testid=\"input-gravatar-email\"\n              name=\"email\"\n              id=\"email-input\"\n              placeholder=\"Email\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <Buttons\n            disabled={ !email || !name }\n            dataTestid=\"btn-play\"\n            id=\"button-form\"\n            onClick={ () => this.handleClick('/game') }\n            text=\"Jogar\"\n            className=\"gameNext\"\n          />\n          <Link to=\"/settings\">\n            <Buttons\n              dataTestid=\"btn-settings\"\n              id=\"button-config\"\n              text=\"Configurar\"\n            />\n          </Link>\n        </section>\n      </section>\n    );\n  }\n}\n\nconst mapDipatchToProps = (dispatch) => ({\n  dispatchSetValue: (state) => {\n    dispatch(setfeedback(state));\n  },\n});\n\nLogin.propTypes = {\n  dispatchSetValue: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDipatchToProps)(Login);\n","export const SET_USER_DATA = 'SETUSERDATA';\nexport const SET_FEEDBACK = 'SET_FEEDBACK';\n\nexport const setuserdata = (payload) => ({\n  type: SET_USER_DATA, payload,\n});\n\nexport const setfeedback = (payload) => ({\n  type: SET_FEEDBACK, payload,\n});\n\n// change color redux;\nexport const SET_BUTTON_COLLOR = 'SET_BUTTON_COLLOR';\nexport const setButtonColoor = (payload) => ({\n  type: SET_BUTTON_COLLOR, payload,\n});\n\nexport const SET_SCORE = 'SET_SCORE';\nexport const setScore = (payload) => ({\n  type: SET_SCORE, payload,\n});\n","import React, { Component } from 'react';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div className=\"App paper container-lg\">\n        <h1 data-testid=\"settings-title\">Configurações</h1>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport logo from '../../7FbY.gif';\nimport { saveScore, getGravatar } from '../../services/Api';\n\nclass Header extends Component {\n  render() {\n    const { player, email, score, statePlayer } = this.props;\n    saveScore(statePlayer);\n    return (\n      <header className=\"header-questions\">\n        <div>\n          <img src={ logo } className=\"logo-header\" alt=\"logo\" />\n        </div>\n        <div className=\"gravatal-img\">\n          <img\n            data-testid=\"header-profile-picture\"\n            src={ `https://www.gravatar.com/avatar/${getGravatar(email)}` }\n            alt=\"player\"\n          />\n          <p\n            data-testid=\"header-player-name\"\n          >\n            { player }\n          </p>\n          <p data-testid=\"header-score\">\n            { score }\n          </p>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  player: PropTypes.string,\n  email: PropTypes.string,\n  score: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  player: state.userReducer.player.name,\n  email: state.userReducer.player.gravatarEmail,\n  score: state.userReducer.player.score,\n  statePlayer: state.userReducer.player,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setScore } from '../Redux/Actions';\nimport { saveScore } from '../services/Api';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 30,\n      pause: props.pauseTimer,\n    };\n    this.subtractTimer = this.subtractTimer.bind(this);\n    this.resetTimerFunc = this.resetTimerFunc.bind(this);\n  }\n\n  async componentDidMount() {\n    const seg = 1000;\n    setInterval(this.subtractTimer, seg);\n  }\n\n  resetTimerFunc() {\n    const { resetTimer, pauseTimer } = this.props;\n    if (resetTimer) {\n      this.setState({\n        counter: 30,\n        pause: pauseTimer,\n      });\n    }\n  }\n\n  subtractTimer() {\n    const { pauseTimer } = this.props;\n    this.setState(({ counter, pause }) => {\n      if (!pause) {\n        return counter > 0\n          ? ({ counter: counter - 1, pause: pauseTimer })\n          : ({ counter: 0 });\n      } return ({ counter, pause });\n    });\n  }\n\n  calculateDificult(dificuldade) {\n    const hard = 3;\n    const medium = 2;\n    const easy = 1;\n    switch (dificuldade) {\n    case 'hard':\n      return hard;\n    case 'medium':\n      return medium;\n    case 'easy':\n      return easy;\n    default: return easy;\n    }\n  }\n\n  points(timer, dificuldade) {\n    const base = 10;\n    const dificult = this.calculateDificult(dificuldade);\n    return base + timer * dificult;\n  }\n\n  render() {\n    const {\n      difficulty,\n      correctClick,\n      setCorrectClick,\n      dispatchCount,\n      resetTimer,\n      player } = this.props;\n    const { counter } = this.state;\n    if (correctClick) {\n      const score = this.points(counter, difficulty);\n      player.score += score;\n      player.assertions += 1;\n      saveScore(player);\n      dispatchCount({ player });\n      setCorrectClick(false);\n    }\n    if (resetTimer) {\n      this.resetTimerFunc();\n    }\n    return (\n      <h3>\n        Tempo:\n        {' '}\n        {counter}\n      </h3>\n    );\n  }\n}\n\nTimer.propTypes = {\n  correctClick: PropTypes.bool.isRequired,\n  resetTimer: PropTypes.bool.isRequired,\n  difficulty: PropTypes.number.isRequired,\n  dispatchCount: PropTypes.func.isRequired,\n  player: PropTypes.shape({\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n  }).isRequired,\n  setCorrectClick: PropTypes.func.isRequired,\n  pauseTimer: PropTypes.bool.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchCount: (player) => {\n    dispatch(setScore(player));\n  },\n});\n\nconst mapStateToProps = (state) => ({\n  player: state.userReducer.player,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { requestTriviaApi } from '../../services/Api';\nimport './Game.css';\nimport Header from './Header';\nimport Timer from '../Timer';\n\nconst innitialState = [\n  {\n    category: 'question-category',\n    type: '',\n    difficulty: '',\n    question: 'question-text',\n    correct_answer: '',\n    sortedAnswers: ['answer1', 'answer2'],\n  },\n];\n\n// eslint-disable-next-line max-lines-per-function\nexport default function Game() {\n  const [apiResponse, setApiResponse] = useState(innitialState);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [disableButton, setdisbleButtons] = useState(false);\n  const [correctClick, setCorrectClick] = useState(false);\n  const [timerId, setTimerID] = useState();\n  const [resetTimer, setResetTimer] = useState(false);\n  const [pauseTimer, setPauseTimer] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const maxQuestionsNumber = 4;\n  const history = useHistory();\n\n  const setTimer30seg = () => {\n    clearTimeout(timerId);\n    const timeOut = 30000;\n    const id = setTimeout(\n      () => setdisbleButtons(true), timeOut,\n    );\n    setTimerID(id);\n  };\n\n  const sortArray = ({\n    correct_answer,\n    incorrect_answers }) => {\n    const fiftyPercent = 0.5;\n    const array = [correct_answer, ...incorrect_answers];\n    return array.sort(() => Math.random() - fiftyPercent);\n  };\n\n  const sortAnswers = (results) => (\n    results.map((object) => (\n      { ...object, sortedAnswers: sortArray(object) }))\n  );\n\n  const fetchApi = async () => {\n    setLoading(true);\n    const { results } = await requestTriviaApi();\n    setApiResponse(sortAnswers(results));\n    setLoading(false);\n    setTimer30seg();\n  };\n\n  const decodeUtf8 = (string) => {\n    // função inspirada em por função de Lucas Rodrigues Turma 08\n    const stringUTF = decodeURI(string);\n    const convertDoubleQuotes = stringUTF.replace(/&quot;/g, '\"');\n    const convertQuotes = convertDoubleQuotes.replace(/&#039;/g, '\\'');\n    const convertAccent = convertQuotes.replace(/&eacute/g, 'é');\n    return convertAccent;\n  };\n\n  const handleAnswerClick = (className) => {\n    setdisbleButtons(true);\n    setPauseTimer(true);\n    if (className === 'correct') {\n      setCorrectClick(true);\n    }\n  };\n\n  const renderButton = (className, answer, key) => (\n    <button\n      type=\"button\"\n      className={ className }\n      key={ key }\n      disabled={ disableButton }\n      onClick={ () => handleAnswerClick(className) }\n    >\n      {decodeUtf8(answer)}\n    </button>);\n\n  const printAnwsers = (sortedAnswers, correct_answer) => (\n    sortedAnswers.map((answer, index) => {\n      if (answer === correct_answer) {\n        return renderButton('correct', answer, index);\n      } return renderButton('wrong', answer, index);\n    })\n  );\n\n  const handleNextQuestion = () => {\n    if (questionIndex < maxQuestionsNumber) {\n      setQuestionIndex(questionIndex + 1);\n      setdisbleButtons(false);\n    }\n    setResetTimer(true);\n    setTimer30seg();\n    setPauseTimer(false);\n  };\n\n  const nextOrGoToFeedbackButton = () => {\n    const nextButton = (\n      <button\n        type=\"button\"\n        onClick={ handleNextQuestion }\n      >\n        Next\n      </button>);\n    const goToFeedBackButton = (\n      <button\n        type=\"button\"\n        onClick={ () => history.push('/feedback') }\n      >\n        Go to Feedback\n      </button>);\n    const none = <span />;\n    if (disableButton && questionIndex < maxQuestionsNumber) {\n      return nextButton;\n    }\n    if (disableButton && questionIndex === maxQuestionsNumber) {\n      return goToFeedBackButton;\n    } return none;\n  };\n\n  useEffect(() => { fetchApi(); }, []);\n  useEffect(() => (setResetTimer(false)), [resetTimer]);\n  const {\n    category,\n    question,\n    correct_answer,\n    sortedAnswers,\n    difficulty,\n  } = apiResponse[questionIndex];\n  return (\n    <main className=\"App paper container-lg\">\n      <Header />\n      {loading ? <h1>Loading...</h1>\n        : (\n          <section>\n            <Timer\n              difficulty={ parseInt(difficulty, 10) }\n              clicked={ disableButton }\n              correctClick={ correctClick }\n              setCorrectClick={ setCorrectClick }\n              resetTimer={ resetTimer }\n              setResetTimer={ setResetTimer }\n              pauseTimer={ pauseTimer }\n              setPauseTimer={ setPauseTimer }\n            />\n            <div id=\"buttonId\">\n              <h6 data-testid=\"question-category\">{category}</h6>\n              <p data-testid=\"question-text\">{decodeUtf8(question)}</p>\n            </div>\n            <div>\n              { printAnwsers(sortedAnswers, correct_answer) }\n            </div>\n            { nextOrGoToFeedbackButton() }\n          </section>\n        )}\n    </main>\n  );\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\nimport { savePlayerRank } from '../../services/Api';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.state = {\n      goodResult: 'Mandou bem!',\n      badResult: 'Podia ser melhor...',\n      questionsAssert: 3,\n    };\n    this.handleRankingClick = this.handleRankingClick.bind(this);\n  }\n\n  handleRankingClick(name, score, email, history) {\n    savePlayerRank({ name, score, email });\n    history.push('/ranking');\n  }\n\n  render() {\n    const { goodResult, badResult, questionsAssert } = this.state;\n    const { name, email, score, assertions, history } = this.props;\n    return (\n      <section className=\"App paper container-lg\">\n        <Header />\n        <div>\n          <h3 data-testid=\"feedback-text\">\n            { assertions >= questionsAssert ? goodResult : badResult }\n          </h3>\n        </div>\n        <section>\n          <h1 data-testid=\"feedback-total-score\">\n            { score }\n            🏆\n          </h1>\n          <h2 data-testid=\"feedback-total-question\">\n            { `acertou ${assertions}` }\n          </h2>\n        </section>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n          onClick={ () => history.push('/') }\n        >\n          Jogar novamente\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n          onClick={ () => this.handleRankingClick(name, score, email, history) }\n        >\n          Ranking\n        </button>\n      </section>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  score: PropTypes.number,\n  assertions: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  name: state.userReducer.player.name,\n  email: state.userReducer.player.gravatarEmail,\n  score: state.userReducer.player.score,\n  assertions: state.userReducer.player.assertions,\n});\n\nexport default connect(\n  mapStateToProps,\n)(Feedback);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getPlayersRank, getGravatar } from '../../services/Api';\nimport './Ranking.css';\n\nconst playerRank = (name, score, email) => (\n  <div>\n    <h5>{name}</h5>\n    <img\n      className=\"gravatarImg\"\n      src={ `https://www.gravatar.com/avatar/${getGravatar(email)}` }\n      alt=\"player\"\n    />\n    <h5>{score}</h5>\n  </div>\n\n);\n\nclass Ranking extends React.Component {\n  render() {\n    const { history } = this.props;\n    return (\n      <main className=\"App paper container-lg\">\n        <h1 data-testid=\"ranking-title\"> Ranking </h1>\n        {getPlayersRank()\n          .map(({ name, score, picture }) => playerRank(name, score, picture))}\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => history.push('/') }\n        >\n          Home\n        </button>\n      </main>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n}.isRequired;\n\nexport default Ranking;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router';\nimport './App.css';\nimport Login from './components/pages/Login';\nimport Settings from './components/pages/Settings';\nimport Game from './components/pages/Game';\nimport Feedback from './components/pages/Feedback';\nimport Ranking from './components/pages/Ranking';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SET_USER_DATA,\n  SET_FEEDBACK,\n  SET_BUTTON_COLLOR,\n  SET_SCORE } from '../Actions/index';\n\nconst INITIAL_STATE = {\n  email: '',\n  player: {\n    name: '',\n    assertions: 0,\n    score: 0,\n    gravatarEmail: '',\n  },\n  colors: {\n    wrongColor: '',\n    rigthColor: '',\n  },\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_USER_DATA:\n    return {\n      ...state,\n      name: action.payload.name,\n      email: action.payload.email,\n    };\n  case SET_FEEDBACK:\n    return {\n      ...state,\n      player: {\n        ...state.player,\n        name: action.payload.name,\n        gravatarEmail: action.payload.email,\n      },\n    };\n  case SET_BUTTON_COLLOR:\n    return {\n      ...state,\n      colors: {\n        wrongColor: action.payload,\n        rigthColor: action.payload,\n      },\n    };\n  case SET_SCORE:\n    return {\n      ...state,\n      player: {\n        name: action.payload.player.name,\n        assertions: action.payload.player.assertions,\n        score: action.payload.player.score,\n        gravatarEmail: action.payload.player.gravatarEmail,\n      },\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\n\nconst rootReducer = combineReducers({ userReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../Reducers/index';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './Redux/Store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}